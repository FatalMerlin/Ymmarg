import { CallbackQuery as GrammyCallbackQuery } from 'grammy/types.ts';
import { CallbackQuery } from '../callback-query.ts';
import { generateId } from '../id.ts';
import {
  BaseUpdate,
  UpdateType,
  UpdateTypeProperty,
  UpdateTypeSelector,
} from '../types/update.ts';

abstract class UpdateBuilderBase {
  protected _update: BaseUpdate;

  constructor(update: BaseUpdate) {
    this._update = update;
  }
}

abstract class BuildableBuilder<T extends UpdateTypeSelector> {
  private _update: UpdateType<T>;

  constructor(
    private _base: BaseUpdate,
    key: T
    // private _prop: UpdateTypeProperty<T>
  ) {
    this._update = {
      update_id: _base.update_id,
      [key]: _prop,
    } as UpdateType<T>;
  }

  public build(): UpdateType<T> {
    if (isNaN(this._update.update_id)) {
      this._update.update_id = generateId();
    }

    return this._update;
  }
}

/**
 * Builder interface for grammY updates.
 */
export class UpdateBuilder extends UpdateBuilderBase {
  constructor() {
    super({
      /**
       * Can be set via {@link id}.
       * If not set, will be auto-generated by final `.build()`.
       */
      update_id: NaN,
    });
  }

  /**
   * Set the id for the update.
   */
  public id(id: number) {
    this._update.update_id = id;
    return this;
  }

  public get callbackQuery() {
    return new CallbackQueryUpdateBuilder(this._update, 'callback_query');
  }

  // public callbackQuery(
  //   callbackQuery:
  //     | CallbackQuery
  //     | GrammyCallbackQuery = new CallbackQuery().build()
  // ): CallbackQueryUpdateBuilder {
  //   return new CallbackQueryUpdateBuilder(
  //     this._update,
  //     'callback_query',
  //     callbackQuery instanceof CallbackQuery
  //       ? callbackQuery.build()
  //       : callbackQuery
  //   );
  // }
}

class CallbackQueryUpdateBuilder extends BuildableBuilder<'callback_query'> {}
